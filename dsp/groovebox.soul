graph Groovebox  [[ main ]] {
    input stream float<2> audioIn;
    input event soul::midi::Message midiIn;

    output stream float<2> audioOut;
    output event soul::midi::Message midiOut;

    let monoToStereo = OneToMany(float, 2);

    connection {
        midiIn -> soul::midi::MPEParser -> SineOsc -> monoToStereo -> audioOut;
        Timeline -> midiOut;
    }
}

processor Timeline {
    output event soul::midi::Message midiOut;

    int currentQuarterNote = 0;
    soul::timeline::Tempo tempo;
    soul::timeline::TimeSignature signature;
    soul::timeline::TransportState transport;

    void init () {
        tempo = soul::timeline::Tempo(120.0);
        signature = soul::timeline::TimeSignature(4, 4);
        transport = soul::timeline::TransportState(1 /* playing */);
    }

    void run() {
        loop {
            loop(int(soul::timeline::framesPerQuarterNote(tempo, signature, processor.frequency))) {
                advance();
            }
            currentQuarterNote++;
            midiOut << soul::midi::Message(
                242 << 16 /* song position pointer */
                    | ((currentQuarterNote * 4) & 127) << 8 /* least significant 7 bits in 16th notes */
                    | ((currentQuarterNote * 4) >> 7) & 127 /* most significant 7 bits in 16th notes */
            );
        }
    }
}

processor SineOsc {
    output stream float audioOut;

    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) midiIn;

    bool playing;
    float notePitch, bendSemitones, phase, phaseIncrement;

    event midiIn(soul::note_events::NoteOn e) {
        playing = true;
        notePitch = e.note;
        bendSemitones = 0.0f;
        calculatePhaseIncrement();
    }

    event midiIn(soul::note_events::NoteOff e) {
        if (e.note == notePitch)
            playing = false;
    }

    void calculatePhaseIncrement() {
        let noteFrequency = soul::noteNumberToFrequency(notePitch + bendSemitones);
        phaseIncrement = float(noteFrequency * twoPi * processor.period);
    }

    void run() {
        loop {
            if (playing) {
                phase = addModulo2Pi(phase, phaseIncrement);
                audioOut << sin(phase);
            }
            advance();
        }
    }
}

processor OneToMany(using T, int n) {
    input stream T audioIn;
    output stream T<n> audioOut;

    void run() {
        loop {
            T<n> sample;
            for (wrap<n> i)
                sample[i] = audioIn;
            audioOut << sample;
            advance();
        }
    }
}
