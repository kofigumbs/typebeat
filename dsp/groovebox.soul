graph Groovebox  [[ main ]] {
    input stream float<2> audioIn;
    output stream float<2> audioOut;

    input event soul::midi::Message midiIn;
    output event soul::midi::Message midiOut;

    // input event soul::timeline::TimeSignature timeSignature;
    // input event soul::timeline::Tempo tempo;
    // input event soul::timeline::TransportState transport;
    // input event soul::timeline::Position position;

    let {
        midiParser = soul::midi::MPEParser;
        sineOsc = SineOsc;
    }

    connection {
        midiIn -> midiParser.parseMIDI;
        midiParser.eventOut -> sineOsc.noteOn,
                               sineOsc.noteOff;
        sineOsc.audioOut -> audioOut;
    }
}

processor SineOsc {
    output stream float<2> audioOut;

    input event soul::note_events::NoteOn noteOn;
    input event soul::note_events::NoteOff noteOff;

    bool playing;
    float notePitch, bendSemitones, phase, phaseIncrement;

    event noteOn(soul::note_events::NoteOn e) {
        playing = true;
        notePitch = e.note;
        bendSemitones = 0.0f;
        calculatePhaseIncrement();
    }

    event noteOff(soul::note_events::NoteOff e) {
      if (e.note == notePitch) playing = false;
    }

    void calculatePhaseIncrement() {
        let noteFrequency = soul::noteNumberToFrequency(notePitch + bendSemitones);
        phaseIncrement = float(noteFrequency * twoPi * processor.period);
    }

    void run() {
        loop {
            if (playing) {
              phase = addModulo2Pi(phase, phaseIncrement);
              audioOut << sin(phase);
            }
            advance();
        }
    }
}
