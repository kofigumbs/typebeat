// vim: set ft=cpp:

graph Groovebox [[ main ]] {
    input event soul::midi::Message midiIn;
    input stream float<2> audioIn;

    output sequencer.midiOut;
    output stream float<2> audioOut;

    let sequencer = Sequencer();

    connection {
        midiIn -> soul::midi::MPEParser -> sequencer;
    }
}

processor Sequencer {
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) midiIn;

    output event soul::midi::Message midiOut;

    int currentSixteenthNote = 0;
    soul::timeline::Tempo tempo;
    soul::timeline::TimeSignature signature;
    soul::timeline::TransportState transport;

    void init () {
        tempo = soul::timeline::Tempo(120.0);
        signature = soul::timeline::TimeSignature(4, 4);
    }

    void run() {
        loop {
            loop(int(soul::timeline::framesPerQuarterNote(tempo, signature, processor.frequency)) / 4) {
                advance();
            }
            if (!transport.isStopped()) {
                currentSixteenthNote++;
                midiOut << setBeat((currentSixteenthNote / 4) % 16);
            }
        }
    }

    /*
     * (ab)use midi for i/o with the web ui
     */

    const int noModifier = 0;
    const int shift      = 100;
    const int alt        = 101;

    event midiIn(soul::note_events::NoteOn message) {
        let key = int(message.note);
        let left = bool(message.channel);
        let right = !left;
        let modifier = roundToInt(message.velocity * 127);

        if (right && modifier == shift && key == 15) {
            if (transport.soul::timeline::isStopped()) {
                transport = soul::timeline::TransportState(1);
            } else {
                currentSixteenthNote = 0;
                midiOut << setBeat(99); /* out of range */
                transport = soul::timeline::TransportState(0);
            }
        }

    }

    event midiIn(soul::note_events::NoteOff message) {
    }

    soul::midi::Message setBeat(int beat) {
        return soul::midi::Message(beat);
    }

    soul::midi::Message setTrack(int track) {
        return soul::midi::Message(1 << 16 | track);
    }

    soul::midi::Message setKit() {
        return soul::midi::Message(2 << 16);
    }

    soul::midi::Message setKey(int root, const bool[12]& scale) {
        int scaleBits = 0;
        for (wrap<scale.size> i)
            if (scale[i])
                scaleBits |= 2 ^ i;
        return soul::midi::Message(3 << 16 | root << 12 | scaleBits);
    }
}
