// vim: set ft=cpp:

namespace enfer {
    const int sampleRate = 44100;

    namespace tr808 {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace sawAcid {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace tr909 {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace squareAcid {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace dmx {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace fmSquare {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace dnb {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace solidBass {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace dark {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace odyssey {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace deep {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace solina {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace tech {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace attackLead {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace modular {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace goodVibes {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace gabber {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace kulakDecay {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace bergh {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace tinyRave {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace vermona {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace funkBass {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace commodore {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace troikaPulse {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    namespace dmg {
        external float<2>[] kick;
        external float<2>[] kickUp;
        external float<2>[] kickDown;
        external float<2>[] tom;
        external float<2>[] snare;
        external float<2>[] snareUp;
        external float<2>[] snareDown;
        external float<2>[] clap;
        external float<2>[] hat;
        external float<2>[] hatOpen;
        external float<2>[] hatShut;
        external float<2>[] cymb;
        external float<2>[] fx1;
        external float<2>[] fx2;
        external float<2>[] fx3;
        external float<2>[] fx4;
    }

    namespace comecon {
        external float<2>[] c2;
        external float<2>[] c3;
    }

    float<2> playKit(int kit, int sample, float64 playbackPosition) {
        if (kit == 0) {
            if (sample ==  0) return playSample(playbackPosition, tr808::kick);
            if (sample ==  1) return playSample(playbackPosition, tr808::kickUp);
            if (sample ==  2) return playSample(playbackPosition, tr808::kickDown);
            if (sample ==  3) return playSample(playbackPosition, tr808::tom);
            if (sample ==  4) return playSample(playbackPosition, tr808::snare);
            if (sample ==  5) return playSample(playbackPosition, tr808::snareUp);
            if (sample ==  6) return playSample(playbackPosition, tr808::snareDown);
            if (sample ==  7) return playSample(playbackPosition, tr808::clap);
            if (sample ==  8) return playSample(playbackPosition, tr808::hat);
            if (sample ==  9) return playSample(playbackPosition, tr808::hatOpen);
            if (sample == 10) return playSample(playbackPosition, tr808::hatShut);
            if (sample == 11) return playSample(playbackPosition, tr808::cymb);
            if (sample == 12) return playSample(playbackPosition, tr808::fx1);
            if (sample == 13) return playSample(playbackPosition, tr808::fx2);
            if (sample == 14) return playSample(playbackPosition, tr808::fx3);
            if (sample == 15) return playSample(playbackPosition, tr808::fx4);
        }
        else if (kit == 1) {
            if (sample ==  0) return playSample(playbackPosition, tr909::kick);
            if (sample ==  1) return playSample(playbackPosition, tr909::kickUp);
            if (sample ==  2) return playSample(playbackPosition, tr909::kickDown);
            if (sample ==  3) return playSample(playbackPosition, tr909::tom);
            if (sample ==  4) return playSample(playbackPosition, tr909::snare);
            if (sample ==  5) return playSample(playbackPosition, tr909::snareUp);
            if (sample ==  6) return playSample(playbackPosition, tr909::snareDown);
            if (sample ==  7) return playSample(playbackPosition, tr909::clap);
            if (sample ==  8) return playSample(playbackPosition, tr909::hat);
            if (sample ==  9) return playSample(playbackPosition, tr909::hatOpen);
            if (sample == 10) return playSample(playbackPosition, tr909::hatShut);
            if (sample == 11) return playSample(playbackPosition, tr909::cymb);
            if (sample == 12) return playSample(playbackPosition, tr909::fx1);
            if (sample == 13) return playSample(playbackPosition, tr909::fx2);
            if (sample == 14) return playSample(playbackPosition, tr909::fx3);
            if (sample == 15) return playSample(playbackPosition, tr909::fx4);
        }
        else if (kit == 2) {
            if (sample ==  0) return playSample(playbackPosition, dmx::kick);
            if (sample ==  1) return playSample(playbackPosition, dmx::kickUp);
            if (sample ==  2) return playSample(playbackPosition, dmx::kickDown);
            if (sample ==  3) return playSample(playbackPosition, dmx::tom);
            if (sample ==  4) return playSample(playbackPosition, dmx::snare);
            if (sample ==  5) return playSample(playbackPosition, dmx::snareUp);
            if (sample ==  6) return playSample(playbackPosition, dmx::snareDown);
            if (sample ==  7) return playSample(playbackPosition, dmx::clap);
            if (sample ==  8) return playSample(playbackPosition, dmx::hat);
            if (sample ==  9) return playSample(playbackPosition, dmx::hatOpen);
            if (sample == 10) return playSample(playbackPosition, dmx::hatShut);
            if (sample == 11) return playSample(playbackPosition, dmx::cymb);
            if (sample == 12) return playSample(playbackPosition, dmx::fx1);
            if (sample == 13) return playSample(playbackPosition, dmx::fx2);
            if (sample == 14) return playSample(playbackPosition, dmx::fx3);
            if (sample == 15) return playSample(playbackPosition, dmx::fx4);
        }
        else if (kit == 3) {
            if (sample ==  0) return playSample(playbackPosition, dnb::kick);
            if (sample ==  1) return playSample(playbackPosition, dnb::kickUp);
            if (sample ==  2) return playSample(playbackPosition, dnb::kickDown);
            if (sample ==  3) return playSample(playbackPosition, dnb::tom);
            if (sample ==  4) return playSample(playbackPosition, dnb::snare);
            if (sample ==  5) return playSample(playbackPosition, dnb::snareUp);
            if (sample ==  6) return playSample(playbackPosition, dnb::snareDown);
            if (sample ==  7) return playSample(playbackPosition, dnb::clap);
            if (sample ==  8) return playSample(playbackPosition, dnb::hat);
            if (sample ==  9) return playSample(playbackPosition, dnb::hatOpen);
            if (sample == 10) return playSample(playbackPosition, dnb::hatShut);
            if (sample == 11) return playSample(playbackPosition, dnb::cymb);
            if (sample == 12) return playSample(playbackPosition, dnb::fx1);
            if (sample == 13) return playSample(playbackPosition, dnb::fx2);
            if (sample == 14) return playSample(playbackPosition, dnb::fx3);
            if (sample == 15) return playSample(playbackPosition, dnb::fx4);
        }
        else if (kit == 4) {
            if (sample ==  0) return playSample(playbackPosition, dark::kick);
            if (sample ==  1) return playSample(playbackPosition, dark::kickUp);
            if (sample ==  2) return playSample(playbackPosition, dark::kickDown);
            if (sample ==  3) return playSample(playbackPosition, dark::tom);
            if (sample ==  4) return playSample(playbackPosition, dark::snare);
            if (sample ==  5) return playSample(playbackPosition, dark::snareUp);
            if (sample ==  6) return playSample(playbackPosition, dark::snareDown);
            if (sample ==  7) return playSample(playbackPosition, dark::clap);
            if (sample ==  8) return playSample(playbackPosition, dark::hat);
            if (sample ==  9) return playSample(playbackPosition, dark::hatOpen);
            if (sample == 10) return playSample(playbackPosition, dark::hatShut);
            if (sample == 11) return playSample(playbackPosition, dark::cymb);
            if (sample == 12) return playSample(playbackPosition, dark::fx1);
            if (sample == 13) return playSample(playbackPosition, dark::fx2);
            if (sample == 14) return playSample(playbackPosition, dark::fx3);
            if (sample == 15) return playSample(playbackPosition, dark::fx4);
        }
        else if (kit == 5) {
            if (sample ==  0) return playSample(playbackPosition, deep::kick);
            if (sample ==  1) return playSample(playbackPosition, deep::kickUp);
            if (sample ==  2) return playSample(playbackPosition, deep::kickDown);
            if (sample ==  3) return playSample(playbackPosition, deep::tom);
            if (sample ==  4) return playSample(playbackPosition, deep::snare);
            if (sample ==  5) return playSample(playbackPosition, deep::snareUp);
            if (sample ==  6) return playSample(playbackPosition, deep::snareDown);
            if (sample ==  7) return playSample(playbackPosition, deep::clap);
            if (sample ==  8) return playSample(playbackPosition, deep::hat);
            if (sample ==  9) return playSample(playbackPosition, deep::hatOpen);
            if (sample == 10) return playSample(playbackPosition, deep::hatShut);
            if (sample == 11) return playSample(playbackPosition, deep::cymb);
            if (sample == 12) return playSample(playbackPosition, deep::fx1);
            if (sample == 13) return playSample(playbackPosition, deep::fx2);
            if (sample == 14) return playSample(playbackPosition, deep::fx3);
            if (sample == 15) return playSample(playbackPosition, deep::fx4);
        }
        else if (kit == 6) {
            if (sample ==  0) return playSample(playbackPosition, tech::kick);
            if (sample ==  1) return playSample(playbackPosition, tech::kickUp);
            if (sample ==  2) return playSample(playbackPosition, tech::kickDown);
            if (sample ==  3) return playSample(playbackPosition, tech::tom);
            if (sample ==  4) return playSample(playbackPosition, tech::snare);
            if (sample ==  5) return playSample(playbackPosition, tech::snareUp);
            if (sample ==  6) return playSample(playbackPosition, tech::snareDown);
            if (sample ==  7) return playSample(playbackPosition, tech::clap);
            if (sample ==  8) return playSample(playbackPosition, tech::hat);
            if (sample ==  9) return playSample(playbackPosition, tech::hatOpen);
            if (sample == 10) return playSample(playbackPosition, tech::hatShut);
            if (sample == 11) return playSample(playbackPosition, tech::cymb);
            if (sample == 12) return playSample(playbackPosition, tech::fx1);
            if (sample == 13) return playSample(playbackPosition, tech::fx2);
            if (sample == 14) return playSample(playbackPosition, tech::fx3);
            if (sample == 15) return playSample(playbackPosition, tech::fx4);
        }
        else if (kit == 7) {
            if (sample ==  0) return playSample(playbackPosition, modular::kick);
            if (sample ==  1) return playSample(playbackPosition, modular::kickUp);
            if (sample ==  2) return playSample(playbackPosition, modular::kickDown);
            if (sample ==  3) return playSample(playbackPosition, modular::tom);
            if (sample ==  4) return playSample(playbackPosition, modular::snare);
            if (sample ==  5) return playSample(playbackPosition, modular::snareUp);
            if (sample ==  6) return playSample(playbackPosition, modular::snareDown);
            if (sample ==  7) return playSample(playbackPosition, modular::clap);
            if (sample ==  8) return playSample(playbackPosition, modular::hat);
            if (sample ==  9) return playSample(playbackPosition, modular::hatOpen);
            if (sample == 10) return playSample(playbackPosition, modular::hatShut);
            if (sample == 11) return playSample(playbackPosition, modular::cymb);
            if (sample == 12) return playSample(playbackPosition, modular::fx1);
            if (sample == 13) return playSample(playbackPosition, modular::fx2);
            if (sample == 14) return playSample(playbackPosition, modular::fx3);
            if (sample == 15) return playSample(playbackPosition, modular::fx4);
        }
        else if (kit == 8) {
            if (sample ==  0) return playSample(playbackPosition, gabber::kick);
            if (sample ==  1) return playSample(playbackPosition, gabber::kickUp);
            if (sample ==  2) return playSample(playbackPosition, gabber::kickDown);
            if (sample ==  3) return playSample(playbackPosition, gabber::tom);
            if (sample ==  4) return playSample(playbackPosition, gabber::snare);
            if (sample ==  5) return playSample(playbackPosition, gabber::snareUp);
            if (sample ==  6) return playSample(playbackPosition, gabber::snareDown);
            if (sample ==  7) return playSample(playbackPosition, gabber::clap);
            if (sample ==  8) return playSample(playbackPosition, gabber::hat);
            if (sample ==  9) return playSample(playbackPosition, gabber::hatOpen);
            if (sample == 10) return playSample(playbackPosition, gabber::hatShut);
            if (sample == 11) return playSample(playbackPosition, gabber::cymb);
            if (sample == 12) return playSample(playbackPosition, gabber::fx1);
            if (sample == 13) return playSample(playbackPosition, gabber::fx2);
            if (sample == 14) return playSample(playbackPosition, gabber::fx3);
            if (sample == 15) return playSample(playbackPosition, gabber::fx4);
        }
        else if (kit == 9) {
            if (sample ==  0) return playSample(playbackPosition, bergh::kick);
            if (sample ==  1) return playSample(playbackPosition, bergh::kickUp);
            if (sample ==  2) return playSample(playbackPosition, bergh::kickDown);
            if (sample ==  3) return playSample(playbackPosition, bergh::tom);
            if (sample ==  4) return playSample(playbackPosition, bergh::snare);
            if (sample ==  5) return playSample(playbackPosition, bergh::snareUp);
            if (sample ==  6) return playSample(playbackPosition, bergh::snareDown);
            if (sample ==  7) return playSample(playbackPosition, bergh::clap);
            if (sample ==  8) return playSample(playbackPosition, bergh::hat);
            if (sample ==  9) return playSample(playbackPosition, bergh::hatOpen);
            if (sample == 10) return playSample(playbackPosition, bergh::hatShut);
            if (sample == 11) return playSample(playbackPosition, bergh::cymb);
            if (sample == 12) return playSample(playbackPosition, bergh::fx1);
            if (sample == 13) return playSample(playbackPosition, bergh::fx2);
            if (sample == 14) return playSample(playbackPosition, bergh::fx3);
            if (sample == 15) return playSample(playbackPosition, bergh::fx4);
        }
        else if (kit == 10) {
            if (sample ==  0) return playSample(playbackPosition, vermona::kick);
            if (sample ==  1) return playSample(playbackPosition, vermona::kickUp);
            if (sample ==  2) return playSample(playbackPosition, vermona::kickDown);
            if (sample ==  3) return playSample(playbackPosition, vermona::tom);
            if (sample ==  4) return playSample(playbackPosition, vermona::snare);
            if (sample ==  5) return playSample(playbackPosition, vermona::snareUp);
            if (sample ==  6) return playSample(playbackPosition, vermona::snareDown);
            if (sample ==  7) return playSample(playbackPosition, vermona::clap);
            if (sample ==  8) return playSample(playbackPosition, vermona::hat);
            if (sample ==  9) return playSample(playbackPosition, vermona::hatOpen);
            if (sample == 10) return playSample(playbackPosition, vermona::hatShut);
            if (sample == 11) return playSample(playbackPosition, vermona::cymb);
            if (sample == 12) return playSample(playbackPosition, vermona::fx1);
            if (sample == 13) return playSample(playbackPosition, vermona::fx2);
            if (sample == 14) return playSample(playbackPosition, vermona::fx3);
            if (sample == 15) return playSample(playbackPosition, vermona::fx4);
        }
        else if (kit == 11) {
            if (sample ==  0) return playSample(playbackPosition, commodore::kick);
            if (sample ==  1) return playSample(playbackPosition, commodore::kickUp);
            if (sample ==  2) return playSample(playbackPosition, commodore::kickDown);
            if (sample ==  3) return playSample(playbackPosition, commodore::tom);
            if (sample ==  4) return playSample(playbackPosition, commodore::snare);
            if (sample ==  5) return playSample(playbackPosition, commodore::snareUp);
            if (sample ==  6) return playSample(playbackPosition, commodore::snareDown);
            if (sample ==  7) return playSample(playbackPosition, commodore::clap);
            if (sample ==  8) return playSample(playbackPosition, commodore::hat);
            if (sample ==  9) return playSample(playbackPosition, commodore::hatOpen);
            if (sample == 10) return playSample(playbackPosition, commodore::hatShut);
            if (sample == 11) return playSample(playbackPosition, commodore::cymb);
            if (sample == 12) return playSample(playbackPosition, commodore::fx1);
            if (sample == 13) return playSample(playbackPosition, commodore::fx2);
            if (sample == 14) return playSample(playbackPosition, commodore::fx3);
            if (sample == 15) return playSample(playbackPosition, commodore::fx4);
        }
        else if (kit == 12) {
            if (sample ==  0) return playSample(playbackPosition, dmg::kick);
            if (sample ==  1) return playSample(playbackPosition, dmg::kickUp);
            if (sample ==  2) return playSample(playbackPosition, dmg::kickDown);
            if (sample ==  3) return playSample(playbackPosition, dmg::tom);
            if (sample ==  4) return playSample(playbackPosition, dmg::snare);
            if (sample ==  5) return playSample(playbackPosition, dmg::snareUp);
            if (sample ==  6) return playSample(playbackPosition, dmg::snareDown);
            if (sample ==  7) return playSample(playbackPosition, dmg::clap);
            if (sample ==  8) return playSample(playbackPosition, dmg::hat);
            if (sample ==  9) return playSample(playbackPosition, dmg::hatOpen);
            if (sample == 10) return playSample(playbackPosition, dmg::hatShut);
            if (sample == 11) return playSample(playbackPosition, dmg::cymb);
            if (sample == 12) return playSample(playbackPosition, dmg::fx1);
            if (sample == 13) return playSample(playbackPosition, dmg::fx2);
            if (sample == 14) return playSample(playbackPosition, dmg::fx3);
            if (sample == 15) return playSample(playbackPosition, dmg::fx4);
        }
        return float<2>(0, 0);
    }

    float<2> playSynth(int synth, int sample, float64 playbackPosition) {
        if (synth == 0) {
            if (sample == 0) return playSample(playbackPosition, sawAcid::c2);
            if (sample == 1) return playSample(playbackPosition, sawAcid::c3);
        } else if (synth == 1) {
            if (sample == 0) return playSample(playbackPosition, squareAcid::c2);
            if (sample == 1) return playSample(playbackPosition, squareAcid::c3);
        } else if (synth == 2) {
            if (sample == 0) return playSample(playbackPosition, fmSquare::c2);
            if (sample == 1) return playSample(playbackPosition, fmSquare::c3);
        } else if (synth == 3) {
            if (sample == 0) return playSample(playbackPosition, solidBass::c2);
            if (sample == 1) return playSample(playbackPosition, solidBass::c3);
        } else if (synth == 4) {
            if (sample == 0) return playSample(playbackPosition, odyssey::c2);
            if (sample == 1) return playSample(playbackPosition, odyssey::c3);
        } else if (synth == 5) {
            if (sample == 0) return playSample(playbackPosition, solina::c2);
            if (sample == 1) return playSample(playbackPosition, solina::c3);
        } else if (synth == 6) {
            if (sample == 0) return playSample(playbackPosition, attackLead::c2);
            if (sample == 1) return playSample(playbackPosition, attackLead::c3);
        } else if (synth == 7) {
            if (sample == 0) return playSample(playbackPosition, goodVibes::c2);
            if (sample == 1) return playSample(playbackPosition, goodVibes::c3);
        } else if (synth == 8) {
            if (sample == 0) return playSample(playbackPosition, kulakDecay::c2);
            if (sample == 1) return playSample(playbackPosition, kulakDecay::c3);
        } else if (synth == 9) {
            if (sample == 0) return playSample(playbackPosition, tinyRave::c2);
            if (sample == 1) return playSample(playbackPosition, tinyRave::c3);
        } else if (synth == 10) {
            if (sample == 0) return playSample(playbackPosition, funkBass::c2);
            if (sample == 1) return playSample(playbackPosition, funkBass::c3);
        } else if (synth == 11) {
            if (sample == 0) return playSample(playbackPosition, troikaPulse::c2);
            if (sample == 1) return playSample(playbackPosition, troikaPulse::c3);
        } else if (synth == 12) {
            if (sample == 0) return playSample(playbackPosition, comecon::c2);
            if (sample == 1) return playSample(playbackPosition, comecon::c3);
        }
        return float<2>(0, 0);
    }

    float<2> playSample(float64 playbackPosition, const float<2>[]& audio) {
        return playbackPosition < audio.size ? audio.readLinearInterpolated(playbackPosition) : float<2>(0, 0);
    }
}
