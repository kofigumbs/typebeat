// vim: set ft=cpp:

graph Groovebox [[ main ]] {
    input event soul::midi::Message midiIn;
    input stream float<2> audioIn;

    output controller.globalMidiOut midiOut;
    output stream float<2> audioOut;

    let controller = sequence::Controller();
    let enferVoices = EnferVoice[8];
    let voiceAllocator = soul::voice_allocators::Basic(8);

    connection {
        midiIn -> soul::midi::MPEParser -> controller;
        controller.kitOut -> voiceAllocator -> enferVoices -> audioOut;
    }
}

namespace sequence {
    const int resolution = 128;

    struct Position {
        int value;
    }

    void next(Position& p) { p.value += 1; }
    void reset(Position& p) { p.value = 0; }

    int toNthNote(Position p, int subdivision) {
        return subdivision * p.value / resolution;
    }

    Position toPosition(int n, int subdivision) {
        return Position(n * resolution / subdivision);
    }

    bool subdivides(int n, Position p) {
        return p.value == p.toNthNote(n).toPosition(n).value;
    }

    int resolutionInFrames(soul::timeline::Tempo tempo, float64 sampleRate) {
        return int(soul::timeline::framesPerBeat(tempo, sampleRate)) / (resolution/4);
    }

    int quantize(Position p, int subdivision) {
        let stepLength = resolution/subdivision;
        return (p.value + stepLength/2)/ stepLength;
    }

    struct Step {
        bool[15] hits;
    }

    struct Track {
        Step[resolution] steps;
    }

    void hit(Step& step, int note, bool toggle) {
        step.hits[wrap<step.hits.size>(note)] = !toggle || !step.hits[wrap<step.hits.size>(note)];
    }

    void record(Track& track, int step, int note, bool toggle) {
        hit(track.steps[wrap<track.steps.size>(step)], note, toggle);
    }

    processor Controller {
        input event (soul::note_events::NoteOn,
                     soul::note_events::NoteOff) midiIn;

        output event soul::note_events::NoteOn kitOut;
        output event soul::midi::Message globalMidiOut;

        Track track;
        int currentTrack = 0;
        bool kit = true;
        int currentKit = 0;
        int quantizeSubdivision = 32;
        Position position;
        bool playing;
        bool armed;
        int keyboardRoot = 60;
        bool[12] keyboardScale = keyboard::scale::major;

        int lastHit;
        soul::timeline::Tempo tempo;

        void init () {
            tempo = soul::timeline::Tempo(180.0);
        }

        void run() {
            loop {
                // sync ui
                setBeat();
                setTrack();
                setArmed();
                if (kit) setKit();
                else setKey();

                // busy wait if sequence is stopped
                while(!playing)
                    advance();

                // play any sounds on this step
                if ((quantizeSubdivision).subdivides(position)) {
                    let step = track.steps[wrap<track.steps.size>(position.toNthNote(quantizeSubdivision))];
                    for (wrap<step.hits.size> i)
                        if (step.hits[i])
                            playKit(i);
                }

                // move sequence position with resolution rate
                loop (resolutionInFrames(tempo, processor.frequency))
                    advance();
                if (playing)
                    position.next();
            }
        }

        void playKit(int sample) {
            if (currentKit == 13)
                // kit #14 is specialized for fx4 since it's otherwise unplayable
                kitOut << soul::note_events::NoteOn(sample, 15.0, 1.0);
            else
                kitOut << soul::note_events::NoteOn(currentKit, float(sample), 1.0);
        }

        /*
         * (ab)use midi for internal control protocol
         */

        keyboard::Key parse(int channel, float note, float velocity) {
            return keyboard::Key(
                bool(channel),
                int(note),
                roundToInt(velocity * 127) >> 1
            );
        }

        bool isTrigger(keyboard::Key k)      { return k.modifier == keyboard::noModifier && k.right; }
        bool isTogglePlay(keyboard::Key k)   { return k.modifier == keyboard::shift && k.right && k.index == 14; }
        bool isToggleArm(keyboard::Key k)    { return k.modifier == keyboard::shift && k.right && k.index == 9; }
        bool isSetOctave(keyboard::Key k)    { return k.modifier == 14 /* p */; }
        bool isSequenceStep(keyboard::Key k) { return k.modifier == keyboard::shift && keyboard::sequence::steps.uses(k); }

        event midiIn(soul::note_events::NoteOn message) {
            let key = parse(message.channel, message.note, message.velocity);

            if (key.isTogglePlay()) {
                playing = !playing;
                if (!playing) position.reset();
                return;
            }

            if (key.isToggleArm()) {
                armed = !armed;
                return;
            }

            if (key.isTrigger()) {
                lastHit = key.index;
                playKit(lastHit);
                if (armed && playing) track.record(position.quantize(quantizeSubdivision), lastHit, false);
                return;
            }

            if (key.isSetOctave()) {
                if (kit) currentKit = key.index;
                else keyboardRoot = key.index;
            }

            if (key.isSequenceStep()) {
                track.record(keyboard::sequence::steps.valueOf(key).toPosition(16).value, lastHit, true);
                if (!playing) playKit(lastHit);
                return;
            }
        }

        void setBeat() {
            globalMidiOut << soul::midi::Message(playing ? position.toNthNote(4) % 16 : 16);
        }

        void setTrack() {
            globalMidiOut << soul::midi::Message(1 << 16 | currentTrack);
        }

        void setKit() {
            globalMidiOut << soul::midi::Message(2 << 16);
        }

        void setKey() {
            int scaleBits = 0;
            for (wrap<keyboardScale.size> i)
                if (keyboardScale[i])
                    scaleBits |= 2 ^ i;
            globalMidiOut << soul::midi::Message(3 << 16 | keyboardRoot << 12 | scaleBits);
        }

        void setArmed() {
            globalMidiOut << soul::midi::Message(4 << 16 | int(armed));
        }

    }
}

processor EnferVoice {
    output stream float<2> audioOut;

    input event soul::note_events::NoteOn midiIn;

    int kit = -1;
    int sample = -1;
    int playbackPosition;

    event midiIn(soul::note_events::NoteOn e) {
        if (e.velocity <= 0) return;
        kit = int(e.channel);
        sample = int(e.note);
        playbackPosition = 0;
    }

    void run() {
        loop {
            audioOut << enfer::play(kit, sample, playbackPosition);
            playbackPosition++;
            advance();
        }
    }
}
