// vim: set ft=cpp:

graph Groovebox [[ main ]] {
    input event soul::midi::Message midiIn;
    input stream float<2> audioIn;

    output sequencer.exportMidi midiOut;
    output stream float<2> audioOut;

    let sequencer = Sequencer();
    let enferVoices = EnferVoice[8];
    let voiceAllocator = soul::voice_allocators::Basic(8);

    connection {
        midiIn -> soul::midi::MPEParser -> sequencer;
        sequencer.playKit -> voiceAllocator -> enferVoices -> audioOut;
    }
}

processor Sequencer {
    input event (soul::note_events::NoteOn,
                 soul::note_events::NoteOff) midiIn;

    output event soul::note_events::NoteOn playKit;
    output event soul::midi::Message exportMidi;

    int track = 0;
    bool kit = true;
    int keyRoot = key::c;
    bool[12] keyScale = key::major;

    int currentSixteenthNote = 0;
    soul::timeline::Tempo tempo;
    soul::timeline::TimeSignature signature;
    soul::timeline::TransportState transport;

    void init () {
        tempo = soul::timeline::Tempo(120.0);
        signature = soul::timeline::TimeSignature(4, 4);
    }

    void run() {
        dump();
        loop {
            loop(int(soul::timeline::framesPerQuarterNote(tempo, signature, processor.frequency)) / 4) {
                advance();
            }
            if (!transport.isStopped()) {
                currentSixteenthNote++;
                setBeat((currentSixteenthNote / 4) % 16);
            }
        }
    }

    void dump() {
        setTrack();
        if (kit) setKit();
        else setKey();
    }

    /*
     * (ab)use midi for i/o with the web ui
     */

    const int noModifier = 60;
    const int shift      = 61;
    const int alt        = 62;

    event midiIn(soul::note_events::NoteOn message) {
        let keyIndex = int(message.note);
        let left = bool(message.channel);
        let right = !left;
        let modifier = roundToInt(message.velocity * 127) >> 1;

        if (right && modifier == shift && keyIndex == 14) {
            if (transport.soul::timeline::isStopped()) {
                transport = soul::timeline::TransportState(1);
            } else {
                currentSixteenthNote = 0;
                setBeat(16); /* anything out of 0-index range */
                transport = soul::timeline::TransportState(0);
            }
        }

        else if (right && modifier == noModifier) {
            playKit << soul::note_events::NoteOn(0, float(keyIndex), 1.0);
        }
    }

    event midiIn(soul::note_events::NoteOff message) {
    }

    void setBeat(int beat) {
        exportMidi << soul::midi::Message(beat);
    }

    void setTrack() {
        exportMidi << soul::midi::Message(1 << 16 | track);
    }

    void setKit() {
        exportMidi << soul::midi::Message(2 << 16);
    }

    void setKey() {
        int scaleBits = 0;
        for (wrap<keyScale.size> i)
            if (keyScale[i])
                scaleBits |= 2 ^ i;
        exportMidi << soul::midi::Message(3 << 16 | keyRoot << 12 | scaleBits);
    }
}

processor EnferVoice {
    output stream float<2> audioOut;

    input event soul::note_events::NoteOn midiIn;

    int kit = -1;
    int sample = -1;
    int playbackPosition;

    event midiIn(soul::note_events::NoteOn e) {
        kit = int(e.channel);
        sample = int(e.note);
        playbackPosition = 0;
    }

    void run() {
        loop {
            audioOut << enfer::play(kit, sample, playbackPosition);
            playbackPosition++;
            advance();
        }
    }
}
